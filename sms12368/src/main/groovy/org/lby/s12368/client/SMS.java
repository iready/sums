package org.lby.s12368.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.6
 * 2016-07-20T15:58:27.199+08:00
 * Generated source version: 3.1.6
 * 
 */
@WebServiceClient(name = "SMS", 
                  wsdlLocation = "http://192.2.102.157/services/SMS?wsdl",
                  targetNamespace = "http://webservice.server.webservice.qmhd.com.cn") 
public class SMS extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://webservice.server.webservice.qmhd.com.cn", "SMS");
    public final static QName SMSHttpEndpoint = new QName("http://webservice.server.webservice.qmhd.com.cn", "SMSHttpEndpoint");
    public final static QName SMSHttpSoap11Endpoint = new QName("http://webservice.server.webservice.qmhd.com.cn", "SMSHttpSoap11Endpoint");
    public final static QName SMSHttpSoap12Endpoint = new QName("http://webservice.server.webservice.qmhd.com.cn", "SMSHttpSoap12Endpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://192.2.102.157/services/SMS?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SMS.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://192.2.102.157/services/SMS?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SMS(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SMS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SMS() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public SMS(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public SMS(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public SMS(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns SMSPortType
     */
    @WebEndpoint(name = "SMSHttpEndpoint")
    public SMSPortType getSMSHttpEndpoint() {
        return super.getPort(SMSHttpEndpoint, SMSPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SMSPortType
     */
    @WebEndpoint(name = "SMSHttpEndpoint")
    public SMSPortType getSMSHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(SMSHttpEndpoint, SMSPortType.class, features);
    }


    /**
     *
     * @return
     *     returns SMSPortType
     */
    @WebEndpoint(name = "SMSHttpSoap11Endpoint")
    public SMSPortType getSMSHttpSoap11Endpoint() {
        return super.getPort(SMSHttpSoap11Endpoint, SMSPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SMSPortType
     */
    @WebEndpoint(name = "SMSHttpSoap11Endpoint")
    public SMSPortType getSMSHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(SMSHttpSoap11Endpoint, SMSPortType.class, features);
    }


    /**
     *
     * @return
     *     returns SMSPortType
     */
    @WebEndpoint(name = "SMSHttpSoap12Endpoint")
    public SMSPortType getSMSHttpSoap12Endpoint() {
        return super.getPort(SMSHttpSoap12Endpoint, SMSPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SMSPortType
     */
    @WebEndpoint(name = "SMSHttpSoap12Endpoint")
    public SMSPortType getSMSHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(SMSHttpSoap12Endpoint, SMSPortType.class, features);
    }

}
